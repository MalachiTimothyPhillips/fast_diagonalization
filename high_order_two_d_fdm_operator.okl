@kernel void high_order_two_d_fdm_operator(@restrict double *Su, @restrict const double *S_x, @restrict const double *S_y, @restrict const double *S_z, @restrict const double *inv_L, @restrict const double *u)
{
    for (int block = 0; block < NUM_POINTS_TOTAL; block += NUM_POINTS_ELEM; @outer)
    {
        @shared double S_x_e[N2];
        @shared double S_y_e[N2];
        @shared double S_z_e[N2];
        @shared double work_1[NUM_POINTS_ELEM];
        @shared double work_2[NUM_POINTS_ELEM];

        for (int k = 0; k < N; k++; @inner)
        {
            for (int j = 0; j < N; j++; @inner)
            {
#pragma unroll
                for (int i = 0; i < N; i++)
                {
                    int v = i + j * N + k * N2;
                    int idx = block + v;
                    int e = block / NUM_POINTS_ELEM;
                    int ij = i + j * N;
                    S_x_e[ij] = S_x[ij + e * N2];
                    S_y_e[ij] = S_y[ij + e * N2];
                    S_z_e[ij] = S_z[ij + e * N2];
                }
            }
        }

        for (int k = 0; k < N; k++; @inner)
        {
            for (int j = 0; j < N; j++; @inner)
            {
#pragma unroll
                for (int i = 0; i < N; i++)
                {
                    int e = block / NUM_POINTS_ELEM;
                    int v = i + j * N + k * N2;
                    double value = 0.0;
                    const double *u_e = u + block;

                    #pragma unroll
                    for (int l = 0; l < N; l++)
                        value += S_x_e[l * N + i] * u_e[l + j * N + k * N2];

                    work_1[v] = value;
                }
            }
        }

        for (int k = 0; k < N; k++; @inner)
        {
            for (int j = 0; j < N; j++; @inner)
            {
#pragma unroll
                for (int i = 0; i < N; i++)
                {
                    int e = block / NUM_POINTS_ELEM;
                    int v = i + j * N + k * N2;
                    double value = 0.0;

                    #pragma unroll
                    for (int l = 0; l < N; l++)
                        value += S_y_e[l * N + j] * work_1[i + l * N + k * N2];

                    work_2[v] = value;
                }
            }
        }

        for (int k = 0; k < N; k++; @inner)
        {
            for (int j = 0; j < N; j++; @inner)
            {
#pragma unroll
                for (int i = 0; i < N; i++)
                {
                    int e = block / NUM_POINTS_ELEM;
                    int v = i + j * N + k * N2;
                    double value = 0.0;

                    #pragma unroll
                    for (int l = 0; l < N; l++)
                        value += S_z_e[l * N + k] * work_2[i + j * N + l * N2];

                    work_1[v] = value * inv_L[v+block];
                }
            }
        }

        for (int k = 0; k < N; k++; @inner)
        {
            for (int j = 0; j < N; j++; @inner)
            {
#pragma unroll
                for (int i = 0; i < N; i++)
                {
                    int e = block / NUM_POINTS_ELEM;
                    int v = i + j * N + k * N2;
                    double value = 0.0;

                    #pragma unroll
                    for (int l = 0; l < N; l++)
                        value += S_x_e[i * N + l] * work_1[l + j * N + k * N2];

                    work_2[v] = value;
                }
            }
        }

        for (int k = 0; k < N; k++; @inner)
        {
            for (int j = 0; j < N; j++; @inner)
            {
#pragma unroll
                for (int i = 0; i < N; i++)
                {
                    int e = block / NUM_POINTS_ELEM;
                    int v = i + j * N + k * N2;
                    double value = 0.0;

                    #pragma unroll
                    for (int l = 0; l < N; l++)
                        value += S_y_e[j * N + l] * work_2[i + l * N + k * N2];

                    work_1[v] = value;
                }
            }
        }

        for (int k = 0; k < N; k++; @inner)
        {
            for (int j = 0; j < N; j++; @inner)
            {
#pragma unroll
                for (int i = 0; i < N; i++)
                {
                    int e = block / NUM_POINTS_ELEM;
                    int v = i + j * N + k * N2;
                    double *Su_e = Su + block;
                    double value = 0.0;

                    #pragma unroll
                    for (int l = 0; l < N; l++)
                        value += S_z_e[k * N + l] * work_1[i + j * N + l * N2];

                    Su_e[v] = value;
                }
            }
        }
    }
}
